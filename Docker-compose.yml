#version: '3.8'
#
#services:
#  mysql:
#    image: mysql:8
#    container_name: mysql_db
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: mydb
#    ports:
#      - "3306:3306"
#    networks:
#      - app-network
#    volumes:
#      - mysql_data:/var/lib/mysql
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka_broker
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    networks:
#      - app-network
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#    networks:
#      - app-network
#
#  user-service:
#    build: ./user-service
#    container_name: user_service
#    depends_on:
#      - mysql
#    ports:
#      - "8081:8081"
#    networks:
#      - app-network
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mydb
#
#  order-service:
#    build: ./order-service
#    container_name: order_service
#    depends_on:
#      - mysql
#      - kafka
#    ports:
#      - "8082:8082"
#    networks:
#      - app-network
#
#  audit-service:
#    build: ./audit-service
#    container_name: audit_service
#    depends_on:
#      - kafka
#    ports:
#      - "8083:8083"
#    networks:
#      - app-network
#
#  api-gateway:
#    build: ./api-gateway
#    container_name: api_gateway
#    depends_on:
#      - user-service
#      - order-service
#    ports:
#      - "8080:8080"
#    networks:
#      - app-network
#
#  frontend:
#    build: ./frontend
#    container_name: frontend_app
#    depends_on:
#      - api-gateway
#    ports:
#      - "5173:80"
#    networks:
#      - app-network
#
#networks:
#  app-network:
#    driver: bridge
#
#volumes:
#  mysql_data:


version: '3.8'

services:

  # Eureka Service Registry
  service-registry:
    build: ./service-registry
    container_name: service-registry
    ports:
      - "8761:8761"
    networks:
      - backend
    environment:
      - SERVER_PORT=8761
      - SPRING_APPLICATION_NAME=service-registry
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761" ]
      interval: 10s
      retries: 5
      start_period: 30s
    restart: always

  # MySQL Database
  mysql:
    image: mysql:8
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password12345
      MYSQL_DATABASE: user_db
    ports:
      - "3306:3306"
    networks:
      - backend
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d


  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - service-registry
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/user_db?createDatabaseIfNotExist=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password12345
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka/

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - mysql
      - service-registry
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/order_db?createDatabaseIfNotExist=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password12345
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka/

  # Audit Service
  audit-service:
    build: ./audit-service
    container_name: audit-service
    ports:
      - "8083:8083"
    depends_on:
      - mysql
      - kafka
      - service-registry
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/audit_db?createDatabaseIfNotExist=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password12345
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka/

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - service-registry
      - user-service
      - order-service
      - audit-service
    networks:
      - backend
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://service-registry:8761/eureka/

  # Frontend (React)
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "5173:5173"
    depends_on:
      - api-gateway
    networks:
      - frontend
    environment:
      - VITE_API_URL=http://localhost:8080

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  backend:
  frontend:
  monitoring:

volumes:
  mysql_data:
